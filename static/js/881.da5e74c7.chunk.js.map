{"version":3,"file":"static/js/881.da5e74c7.chunk.js","mappings":"wRACA,EAA6B,2BAA7B,EAAgE,sBAAhE,EAA4F,oBAA5F,EAA6H,2BAA7H,EAAqK,2BAArK,EAA0P,0B,kBC+F1P,EAvFe,WACb,OAA4CA,EAAAA,EAAAA,YAAWC,EAAAA,GAA/CC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,iBACvB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,SAC/BC,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,SAAO,IAE7BC,EAAAA,EAAAA,YAAU,WACHN,IAAeI,EAAcG,SAKlC,iBAAC,sGAEGX,GAAa,GAFhB,UAG0BY,EAAAA,EAAAA,IAASR,GAHnC,gBAGWS,EAHX,EAGWA,KACRf,EAASe,EAAKC,SAJjB,gDAMGC,QAAQC,IAAR,MANH,yBAQGhB,GAAa,GARhB,2EAAD,GAJEQ,EAAcG,SAAU,CAe3B,GAAE,CAACP,IAmBJ,OANAM,EAAAA,EAAAA,YAAU,WACc,OAAlBhB,GACFS,EAAgB,CAAEc,MAAOvB,GAE5B,GAAE,CAACA,EAAeS,KAGjB,gCACE,kBAAMe,UAAWC,EAAgBC,SAnBf,SAAAC,GACpBA,EAAEC,iBACF,IACMC,EADYF,EAAEG,OAAOpB,YAAnBqB,MACqBC,OAAOC,cACpC,IAAKJ,EACH,OAAOK,EAAAA,OAAAA,KAAY,6CAErBjC,EAAiB4B,GACjBpB,EAAgB,CAAEc,MAAOM,GAC1B,EAUG,WACE,kBACEM,aAAczB,EACd0B,KAAK,OACLC,KAAK,cACLb,UAAWC,EACXa,YAAY,yBAEd,oBAAQF,KAAK,SAASZ,UAAWC,EAAjC,WACE,SAAC,MAAD,IADF,eAKDpB,GACC,SAACkC,EAAA,EAAD,KAEA,gCACGpC,IACC,eAAIqB,UAAWC,EAAf,SACGtB,EAAMqC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACT,eAAalB,UAAWC,EAAxB,UACE,UAAC,KAAD,CAASkB,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMjC,GAArC,WACE,SAAC,MAAD,IACC8B,MAHID,EADA,OAUbtC,EAAM2C,SAAWhC,IACjB,eAAGU,UAAWC,EAAd,6BACiB,uBAAIf,YAOhC,C","sources":["webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchForm\":\"Movies_searchForm__J4-xw\",\"input\":\"Movies_input__KrUqs\",\"btn\":\"Movies_btn__TlfBQ\",\"searchList\":\"Movies_searchList__acL74\",\"searchItem\":\"Movies_searchItem__mdXQx\",\"searchCaption\":\"Movies_searchCaption__iy7AS\",\"noResults\":\"Movies_noResults__zUCR-\"};","import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { NavLink, useLocation, useSearchParams } from 'react-router-dom';\nimport { BiChevronRight, BiSearch } from 'react-icons/bi';\nimport { Notify } from 'notiflix';\nimport Loader from 'components/Loader/Loader';\nimport { getMovie } from 'services/movie-api';\nimport css from './Movies.module.css';\nimport ctx from 'context/moviesContext';\n\nconst Movies = () => {\n  const { searchedQuery, setSearchedQuery } = useContext(ctx);\n  const [movie, setMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n  const location = useLocation();\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    if (!searchQuery && isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    (async () => {\n      try {\n        setIsLoading(true);\n        const { data } = await getMovie(searchQuery);\n        setMovie(data.results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [searchQuery]);\n\n  const handlerSubmit = e => {\n    e.preventDefault();\n    const { value } = e.target.searchQuery;\n    const validatedValue = value.trim().toLowerCase();\n    if (!validatedValue) {\n      return Notify.info(\"The search string should\\n't be an empty \");\n    }\n    setSearchedQuery(validatedValue);\n    setSearchParams({ query: validatedValue });\n  };\n\n  useEffect(() => {\n    if (searchedQuery !== null) {\n      setSearchParams({ query: searchedQuery });\n    }\n  }, [searchedQuery, setSearchParams]);\n\n  return (\n    <section>\n      <form className={css.searchForm} onSubmit={handlerSubmit}>\n        <input\n          defaultValue={searchQuery}\n          type=\"text\"\n          name=\"searchQuery\"\n          className={css.input}\n          placeholder=\"I'm looking for... \"\n        />\n        <button type=\"submit\" className={css.btn}>\n          <BiSearch />\n          Search\n        </button>\n      </form>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          {movie && (\n            <ul className={css.searchList}>\n              {movie.map(({ id, original_title }) => (\n                <li key={id} className={css.searchItem}>\n                  <NavLink to={`${id}`} state={{ from: location }}>\n                    <BiChevronRight />\n                    {original_title}\n                  </NavLink>\n                </li>\n              ))}\n            </ul>\n          )}\n          {!movie.length && !isFirstRender && (\n            <p className={css.noResults}>\n              No results for <b>{searchQuery}</b>\n            </p>\n          )}\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default Movies;\n"],"names":["useContext","ctx","searchedQuery","setSearchedQuery","useState","movie","setMovie","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","searchQuery","get","location","useLocation","isFirstRender","useRef","useEffect","current","getMovie","data","results","console","log","query","className","css","onSubmit","e","preventDefault","validatedValue","target","value","trim","toLowerCase","Notify","defaultValue","type","name","placeholder","Loader","map","id","original_title","to","state","from","length"],"sourceRoot":""}